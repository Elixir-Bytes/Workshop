# FizzBuzz

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## FizzBuzz

In the Elixir cell below create a Module `FizzBuzz` with a function `run/1` which takes in a **range**.

Enumerate through the integers and return a new list where

* integers divisible by `3` are replaced with `fizz`
* integers divisible by `5` are replaced with `buzz`
* integers divisible by `3` and `5` are replaced with `fizzbuzz`
* integers not matching the above stay the same.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
FizzBuzz.run(1..15)
[1, 2, "fizz", 4, "buzz", "fizz", 7, 8, "fizz", "buzz", 11, "fizz", 13, 14, "fizzbuzz"]
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
  <summary>Example Solution</summary>

  ```elixir
  defmodule FizzBuzz do
    def run(range) do
      Enum.map(range, fn int ->
        cond do
          rem(int, 3) == 0 and rem(int, 5) == 0 -> "fizzbuzz"
          rem(int, 3) == 0 -> "fizz"
          rem(int, 5) == 0 -> "buzz"
          true -> int
        end
      end)
    end
  end

  FizzBuzz.run(1..100)
  ```
</details>

Enter your solution below.

<!-- livebook:{"attrs":{"assertions":"assert FizzBuzz.run(1..15) == [1, 2, \"fizz\", 4, \"buzz\", \"fizz\", 7, 8, \"fizz\", \"buzz\", 11, \"fizz\", 13, 14, \"fizzbuzz\"]\nassert FizzBuzz.run(10..15) == [\"buzz\", 11, \"fizz\", 13, 14, \"fizzbuzz\"]","attempts":2,"code":"defmodule FizzBuzz do\n  def run(_range) do\n  end\nend","solution":"","title":"FizzBuzz"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "FizzBuzz" do
    try do
      Process.flag(:trap_exit, true)

      defmodule FizzBuzz do
        def run(_range) do
        end
      end

      assert FizzBuzz.run(1..15) == [
               1,
               2,
               "fizz",
               4,
               "buzz",
               "fizz",
               7,
               8,
               "fizz",
               "buzz",
               11,
               "fizz",
               13,
               14,
               "fizzbuzz"
             ]

      assert FizzBuzz.run(10..15) == ["buzz", 11, "fizz", 13, 14, "fizzbuzz"]
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
        flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)

      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
defmodule FizzBuzz do
  def run(_range) do
  end
end
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish fizzbuzz exercise"
```

## Up Next

| Previous                       | Next                                                         |
| ------------------------------ | -----------------------------------------------------------: |
| [Enum](../reading/enum.livemd) | [Named Number Lists](../exercises/named_number_lists.livemd) |
